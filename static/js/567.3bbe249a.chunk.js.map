{"version":3,"file":"static/js/567.3bbe249a.chunk.js","mappings":"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","sources":["components/ContactList/contactList.styled.jsx","components/ContactItem/contactItem.styled.jsx","components/ContactItem/contactItem.jsx","redux/selectors.js","components/ContactList/contactList.jsx","components/ContactForm/contactForm.styled.jsx","components/ContactForm/contactForm.jsx","components/Filter/filter.styled.jsx","components/Filter/filter.jsx","pages/contactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 500px;\n  gap: 15px;\n  margin: auto;\n  margin-top: 40px;\n  padding: 0px;\n  border-radius: 4px;\n  border: 3px solid blueviolet;\n`;\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  background-color: #ffffff;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n`;\n\nexport const RemoveButton = styled.button`\n  padding: 4px 8px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid blueviolet;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: pink;\n  }\n`;\n\nexport const ContactData = styled.p`\n  color: black;\n`;\n","import { ListItem, ContactData, RemoveButton } from './contactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const deleteContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <ListItem>\n      <ContactData>\n        {name}: {number}\n      </ContactData>\n      <RemoveButton type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </RemoveButton>\n    </ListItem>\n  );\n};\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectFiletrs = state => state.filter.value;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { List } from './contactList.styled';\nimport { ContactItem } from '../ContactItem/contactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFiletrs } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filters = useSelector(selectFiletrs);\n\n  const filterContacts = () => {\n    const normalizedFilter = filters.toLowerCase();\n    return contacts.filter(contact => {\n      const contactName = contact.name.toLowerCase();\n      const contactNumber = contact.number;\n\n      return (\n        contactName.toLowerCase().includes(normalizedFilter) ||\n        contactNumber.includes(normalizedFilter)\n      );\n    });\n  };\n\n  const filteredContacts = filterContacts();\n\n  return (\n    <div>\n      <List>\n        {filteredContacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n      </List>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\nimport {\n  Form as StyledForm,\n  Field as FormFieldStyled,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const FormContainer = styled.div``;\n\nexport const Form = styled(StyledForm)`\n  display: flex;\n  flex-direction: column;\n  width: 500px;\n  padding: 12px;\n  border: 3px solid blueviolet;\n  border-radius: 4px;\n  margin: 0 auto;\n`;\n\nexport const FormGroup = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  color: lightskyblue;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  color: red;\n  font-weight: 600;\n`;\n\nexport const Field = styled(FormFieldStyled)`\n  color: black;\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n`;\n\nexport const Button = styled.button`\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid lightskyblue;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: pink;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport {\n  Field,\n  Form,\n  Button,\n  FormContainer,\n  FormGroup,\n  ErrorMessage,\n} from './contactForm.styled';\nimport { selectContacts } from 'redux/selectors';\nimport { saveNewContact } from 'redux/operations';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <FormContainer>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={async (values, actions) => {\n          actions.resetForm();\n\n          if (contacts.some(contact => contact.name === values.name)) {\n            Notify.failure(`${values.name} already in phonebook!`);\n            return;\n          }\n          try {\n            await dispatch(saveNewContact(values));\n            Notify.success(`${values.name} added to your contacts!`);\n          } catch (error) {\n            Notify.failure('Something went wrong please try again');\n          }\n        }}\n      >\n        <Form>\n          <FormGroup>\n            Name\n            <Field name=\"name\" placeholder=\"Mike\" />\n            <ErrorMessage name=\"name\" />\n          </FormGroup>\n\n          <FormGroup>\n            Phone\n            <Field name=\"number\" placeholder=\"+380...\" />\n            <ErrorMessage name=\"number\" />\n          </FormGroup>\n\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      </Formik>\n    </FormContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  color: lightskyblue;\n  font-size: 20px;\n  margin-bottom: 5px;\n  font-weight: 700px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 400px;\n  padding: 10px;\n  margin: 0 auto;\n  border-radius: 4px;\n  border: 3px solid blueviolet;\n  margin-left: 20px;\n`;\n\nexport const Wrapper = styled.div`\n  margin: 20px auto 30px auto;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import { changeFilters } from 'redux/filterSlice';\nimport { FilterLabel, FilterInput, Wrapper } from './filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFiletrs } from 'redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(selectFiletrs);\n\n  return (\n    <Wrapper>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput\n          name=\"filter\"\n          type=\"text\"\n          value={filters}\n          onChange={event => dispatch(changeFilters(event.currentTarget.value))}\n        />\n      </FilterLabel>\n    </Wrapper>\n  );\n};\n","import { ContactList } from 'components/ContactList/contactList';\nimport { ContactForm } from 'components/ContactForm/contactForm';\nimport { Filter } from 'components/Filter/filter';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","ListItem","RemoveButton","_templateObject2","ContactData","_templateObject3","ContactItem","_ref","id","name","number","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","removeContact","deleteContact","selectContacts","state","contacts","selectFiletrs","filter","value","ContactList","useSelector","filters","filteredContacts","normalizedFilter","toLowerCase","contact","contactName","contactNumber","includes","filterContacts","map","FormContainer","Form","StyledForm","FormGroup","ErrorMessage","FormikErrorMessage","_templateObject4","Field","FormFieldStyled","_templateObject5","Button","_templateObject6","contactSchema","Yup","shape","min","max","required","ContactForm","Formik","initialValues","validationSchema","onSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","values","actions","_context","prev","next","resetForm","some","Notify","concat","abrupt","saveNewContact","t0","stop","_x","_x2","apply","arguments","placeholder","FilterLabel","FilterInput","Wrapper","Filter","onChange","event","changeFilters","currentTarget","ContactsPage","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}